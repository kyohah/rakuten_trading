=begin
#API（証拠金取引所）

#本APIを利用することにより、取り扱っている銘柄一覧の取得、ローソク足データの取得、板の取得、歩値の取得、注文、残高照会といった操作を行う事ができます。 ## 留意事項 - APIキーはお客様のアカウント情報と紐付いております。もし第三者がお客様のAPIキーを知った場合、遠隔で売買注文の操作が可能となります。APIキーを第三者へ渡す事はセキュリティリスクを鑑みお控えください。 - 他社が提供するAPI機能を使用した自動売買取引ツールは、ご自身の判断と責任でご利用ください。 - リクエストパラメーターやレスポンスの日時についてはミリ秒のtimestamp(Unix Time)を用います。 - 日時の範囲検索は「以上・未満」で検索します。 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54
=end

require 'date'

module RakutenTrading
  class InlineResponse2006
    # 建玉評価損益
    attr_accessor :floating_profit

    # 建玉管理料
    attr_accessor :floating_position_fee

    # 建玉管理料（未実現）
    attr_accessor :remaining_floating_position_fee

    # 想定約定手数料
    attr_accessor :floating_trade_fee

    # 総評価損益（建玉評価損益 - 建玉管理料（未実現） - 想定約定手数料）
    attr_accessor :floating_profit_all

    # 必要証拠金
    attr_accessor :used_margin

    # 注文中証拠金
    attr_accessor :necessary_margin

    # 証拠金残高
    attr_accessor :balance

    # 純資産額
    attr_accessor :equity

    # 証拠金維持率%
    attr_accessor :margin_maintenance_percent

    # 建玉可能額
    attr_accessor :usable_amount

    # 出金可能額
    attr_accessor :withdrawable_amount

    # 出金依頼中金額
    attr_accessor :withdrawal_amount_reserved

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'floating_profit' => :'floatingProfit',
        :'floating_position_fee' => :'floatingPositionFee',
        :'remaining_floating_position_fee' => :'remainingFloatingPositionFee',
        :'floating_trade_fee' => :'floatingTradeFee',
        :'floating_profit_all' => :'floatingProfitAll',
        :'used_margin' => :'usedMargin',
        :'necessary_margin' => :'necessaryMargin',
        :'balance' => :'balance',
        :'equity' => :'equity',
        :'margin_maintenance_percent' => :'marginMaintenancePercent',
        :'usable_amount' => :'usableAmount',
        :'withdrawable_amount' => :'withdrawableAmount',
        :'withdrawal_amount_reserved' => :'withdrawalAmountReserved'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'floating_profit' => :'Object',
        :'floating_position_fee' => :'Object',
        :'remaining_floating_position_fee' => :'Object',
        :'floating_trade_fee' => :'Object',
        :'floating_profit_all' => :'Object',
        :'used_margin' => :'Object',
        :'necessary_margin' => :'Object',
        :'balance' => :'Object',
        :'equity' => :'Object',
        :'margin_maintenance_percent' => :'Object',
        :'usable_amount' => :'Object',
        :'withdrawable_amount' => :'Object',
        :'withdrawal_amount_reserved' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RakutenTrading::InlineResponse2006` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RakutenTrading::InlineResponse2006`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'floating_profit')
        self.floating_profit = attributes[:'floating_profit']
      end

      if attributes.key?(:'floating_position_fee')
        self.floating_position_fee = attributes[:'floating_position_fee']
      end

      if attributes.key?(:'remaining_floating_position_fee')
        self.remaining_floating_position_fee = attributes[:'remaining_floating_position_fee']
      end

      if attributes.key?(:'floating_trade_fee')
        self.floating_trade_fee = attributes[:'floating_trade_fee']
      end

      if attributes.key?(:'floating_profit_all')
        self.floating_profit_all = attributes[:'floating_profit_all']
      end

      if attributes.key?(:'used_margin')
        self.used_margin = attributes[:'used_margin']
      end

      if attributes.key?(:'necessary_margin')
        self.necessary_margin = attributes[:'necessary_margin']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'equity')
        self.equity = attributes[:'equity']
      end

      if attributes.key?(:'margin_maintenance_percent')
        self.margin_maintenance_percent = attributes[:'margin_maintenance_percent']
      end

      if attributes.key?(:'usable_amount')
        self.usable_amount = attributes[:'usable_amount']
      end

      if attributes.key?(:'withdrawable_amount')
        self.withdrawable_amount = attributes[:'withdrawable_amount']
      end

      if attributes.key?(:'withdrawal_amount_reserved')
        self.withdrawal_amount_reserved = attributes[:'withdrawal_amount_reserved']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          floating_profit == o.floating_profit &&
          floating_position_fee == o.floating_position_fee &&
          remaining_floating_position_fee == o.remaining_floating_position_fee &&
          floating_trade_fee == o.floating_trade_fee &&
          floating_profit_all == o.floating_profit_all &&
          used_margin == o.used_margin &&
          necessary_margin == o.necessary_margin &&
          balance == o.balance &&
          equity == o.equity &&
          margin_maintenance_percent == o.margin_maintenance_percent &&
          usable_amount == o.usable_amount &&
          withdrawable_amount == o.withdrawable_amount &&
          withdrawal_amount_reserved == o.withdrawal_amount_reserved
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [floating_profit, floating_position_fee, remaining_floating_position_fee, floating_trade_fee, floating_profit_all, used_margin, necessary_margin, balance, equity, margin_maintenance_percent, usable_amount, withdrawable_amount, withdrawal_amount_reserved].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        RakutenTrading.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
