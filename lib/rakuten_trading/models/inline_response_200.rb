=begin
#API（証拠金取引所）

#本APIを利用することにより、取り扱っている銘柄一覧の取得、ローソク足データの取得、板の取得、歩値の取得、注文、残高照会といった操作を行う事ができます。 ## 留意事項 - APIキーはお客様のアカウント情報と紐付いております。もし第三者がお客様のAPIキーを知った場合、遠隔で売買注文の操作が可能となります。APIキーを第三者へ渡す事はセキュリティリスクを鑑みお控えください。 - 他社が提供するAPI機能を使用した自動売買取引ツールは、ご自身の判断と責任でご利用ください。 - リクエストパラメーターやレスポンスの日時についてはミリ秒のtimestamp(Unix Time)を用います。 - 日時の範囲検索は「以上・未満」で検索します。 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54
=end

require 'date'

module RakutenTrading
  class InlineResponse200
    # シンボルID
    attr_accessor :id

    # 口座種別
    attr_accessor :authority

    # 取引タイプ
    attr_accessor :trade_type

    # 通貨ペア
    attr_accessor :currency_pair

    # ベース通貨
    attr_accessor :base_currency

    # クォート通貨
    attr_accessor :quote_currency

    # 数量の小数点以下桁数(ベース通貨桁数)。例) 1の場合0.1など
    attr_accessor :base_scale

    # 価格の小数点以下桁数(クォート通貨桁数)。例) 0の場合、50000など
    attr_accessor :quote_scale

    # 取扱単位(注文数量の最小単位)
    attr_accessor :base_step_amount

    # 1回の最小注文数量
    attr_accessor :min_order_amount

    # 1回の最大注文数量
    attr_accessor :max_order_amount

    # メイカー約定手数料率%
    attr_accessor :maker_trade_fee_percent

    # テイカー約定手数料率%
    attr_accessor :taker_trade_fee_percent

    # 新規停止(決済・取消のみ可能)
    attr_accessor :close_only

    # レポート閲覧のみ可能
    attr_accessor :view_only

    # 有効
    attr_accessor :enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'authority' => :'authority',
        :'trade_type' => :'tradeType',
        :'currency_pair' => :'currencyPair',
        :'base_currency' => :'baseCurrency',
        :'quote_currency' => :'quoteCurrency',
        :'base_scale' => :'baseScale',
        :'quote_scale' => :'quoteScale',
        :'base_step_amount' => :'baseStepAmount',
        :'min_order_amount' => :'minOrderAmount',
        :'max_order_amount' => :'maxOrderAmount',
        :'maker_trade_fee_percent' => :'makerTradeFeePercent',
        :'taker_trade_fee_percent' => :'takerTradeFeePercent',
        :'close_only' => :'closeOnly',
        :'view_only' => :'viewOnly',
        :'enabled' => :'enabled'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'authority' => :'Object',
        :'trade_type' => :'Object',
        :'currency_pair' => :'Object',
        :'base_currency' => :'Object',
        :'quote_currency' => :'Object',
        :'base_scale' => :'Object',
        :'quote_scale' => :'Object',
        :'base_step_amount' => :'Object',
        :'min_order_amount' => :'Object',
        :'max_order_amount' => :'Object',
        :'maker_trade_fee_percent' => :'Object',
        :'taker_trade_fee_percent' => :'Object',
        :'close_only' => :'Object',
        :'view_only' => :'Object',
        :'enabled' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RakutenTrading::InlineResponse200` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RakutenTrading::InlineResponse200`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'authority')
        self.authority = attributes[:'authority']
      end

      if attributes.key?(:'trade_type')
        self.trade_type = attributes[:'trade_type']
      end

      if attributes.key?(:'currency_pair')
        self.currency_pair = attributes[:'currency_pair']
      end

      if attributes.key?(:'base_currency')
        self.base_currency = attributes[:'base_currency']
      end

      if attributes.key?(:'quote_currency')
        self.quote_currency = attributes[:'quote_currency']
      end

      if attributes.key?(:'base_scale')
        self.base_scale = attributes[:'base_scale']
      end

      if attributes.key?(:'quote_scale')
        self.quote_scale = attributes[:'quote_scale']
      end

      if attributes.key?(:'base_step_amount')
        self.base_step_amount = attributes[:'base_step_amount']
      end

      if attributes.key?(:'min_order_amount')
        self.min_order_amount = attributes[:'min_order_amount']
      end

      if attributes.key?(:'max_order_amount')
        self.max_order_amount = attributes[:'max_order_amount']
      end

      if attributes.key?(:'maker_trade_fee_percent')
        self.maker_trade_fee_percent = attributes[:'maker_trade_fee_percent']
      end

      if attributes.key?(:'taker_trade_fee_percent')
        self.taker_trade_fee_percent = attributes[:'taker_trade_fee_percent']
      end

      if attributes.key?(:'close_only')
        self.close_only = attributes[:'close_only']
      end

      if attributes.key?(:'view_only')
        self.view_only = attributes[:'view_only']
      end

      if attributes.key?(:'enabled')
        self.enabled = attributes[:'enabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          authority == o.authority &&
          trade_type == o.trade_type &&
          currency_pair == o.currency_pair &&
          base_currency == o.base_currency &&
          quote_currency == o.quote_currency &&
          base_scale == o.base_scale &&
          quote_scale == o.quote_scale &&
          base_step_amount == o.base_step_amount &&
          min_order_amount == o.min_order_amount &&
          max_order_amount == o.max_order_amount &&
          maker_trade_fee_percent == o.maker_trade_fee_percent &&
          taker_trade_fee_percent == o.taker_trade_fee_percent &&
          close_only == o.close_only &&
          view_only == o.view_only &&
          enabled == o.enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, authority, trade_type, currency_pair, base_currency, quote_currency, base_scale, quote_scale, base_step_amount, min_order_amount, max_order_amount, maker_trade_fee_percent, taker_trade_fee_percent, close_only, view_only, enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        RakutenTrading.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
