=begin
#API（証拠金取引所）

#本APIを利用することにより、取り扱っている銘柄一覧の取得、ローソク足データの取得、板の取得、歩値の取得、注文、残高照会といった操作を行う事ができます。 ## 留意事項 - APIキーはお客様のアカウント情報と紐付いております。もし第三者がお客様のAPIキーを知った場合、遠隔で売買注文の操作が可能となります。APIキーを第三者へ渡す事はセキュリティリスクを鑑みお控えください。 - 他社が提供するAPI機能を使用した自動売買取引ツールは、ご自身の判断と責任でご利用ください。 - リクエストパラメーターやレスポンスの日時についてはミリ秒のtimestamp(Unix Time)を用います。 - 日時の範囲検索は「以上・未満」で検索します。 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54
=end

require 'date'

module RakutenTrading
  class OrderData
    # 注文の種類（新規または決済）
    attr_accessor :order_behavior

    # 決済対象の建玉ID。決済注文の場合必須。
    attr_accessor :position_id

    # 売買方向（BUYまたはSELL）
    attr_accessor :order_side

    # 注文タイプ（LIMIT, MARKET, STOP）
    attr_accessor :order_type

    # 注文価格。指値注文や逆指値注文の場合必須。
    attr_accessor :price

    # 注文数量
    attr_accessor :amount

    # 注文有効期限（GTC, DAY）
    attr_accessor :order_expire

    # レバレッジ倍率。新規注文の場合のみ。
    attr_accessor :leverage

    # 建玉決済の挙動（CROSS, FIFO）
    attr_accessor :close_behavior

    # メイカー注文のみ許可するかどうか
    attr_accessor :post_only

    # IFD決済指値注文価格
    attr_accessor :ifd_close_limit_price

    # IFD決済逆指値注文価格
    attr_accessor :ifd_close_stop_price

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'order_behavior' => :'orderBehavior',
        :'position_id' => :'positionId',
        :'order_side' => :'orderSide',
        :'order_type' => :'orderType',
        :'price' => :'price',
        :'amount' => :'amount',
        :'order_expire' => :'orderExpire',
        :'leverage' => :'leverage',
        :'close_behavior' => :'closeBehavior',
        :'post_only' => :'postOnly',
        :'ifd_close_limit_price' => :'ifdCloseLimitPrice',
        :'ifd_close_stop_price' => :'ifdCloseStopPrice'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'order_behavior' => :'Object',
        :'position_id' => :'Object',
        :'order_side' => :'Object',
        :'order_type' => :'Object',
        :'price' => :'Object',
        :'amount' => :'Object',
        :'order_expire' => :'Object',
        :'leverage' => :'Object',
        :'close_behavior' => :'Object',
        :'post_only' => :'Object',
        :'ifd_close_limit_price' => :'Object',
        :'ifd_close_stop_price' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `RakutenTrading::OrderData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `RakutenTrading::OrderData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'order_behavior')
        self.order_behavior = attributes[:'order_behavior']
      end

      if attributes.key?(:'position_id')
        self.position_id = attributes[:'position_id']
      end

      if attributes.key?(:'order_side')
        self.order_side = attributes[:'order_side']
      end

      if attributes.key?(:'order_type')
        self.order_type = attributes[:'order_type']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'order_expire')
        self.order_expire = attributes[:'order_expire']
      end

      if attributes.key?(:'leverage')
        self.leverage = attributes[:'leverage']
      end

      if attributes.key?(:'close_behavior')
        self.close_behavior = attributes[:'close_behavior']
      end

      if attributes.key?(:'post_only')
        self.post_only = attributes[:'post_only']
      end

      if attributes.key?(:'ifd_close_limit_price')
        self.ifd_close_limit_price = attributes[:'ifd_close_limit_price']
      end

      if attributes.key?(:'ifd_close_stop_price')
        self.ifd_close_stop_price = attributes[:'ifd_close_stop_price']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @order_behavior.nil?
        invalid_properties.push('invalid value for "order_behavior", order_behavior cannot be nil.')
      end

      if @order_side.nil?
        invalid_properties.push('invalid value for "order_side", order_side cannot be nil.')
      end

      if @order_type.nil?
        invalid_properties.push('invalid value for "order_type", order_type cannot be nil.')
      end

      if @amount.nil?
        invalid_properties.push('invalid value for "amount", amount cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @order_behavior.nil?
      return false if @order_side.nil?
      return false if @order_type.nil?
      return false if @amount.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          order_behavior == o.order_behavior &&
          position_id == o.position_id &&
          order_side == o.order_side &&
          order_type == o.order_type &&
          price == o.price &&
          amount == o.amount &&
          order_expire == o.order_expire &&
          leverage == o.leverage &&
          close_behavior == o.close_behavior &&
          post_only == o.post_only &&
          ifd_close_limit_price == o.ifd_close_limit_price &&
          ifd_close_stop_price == o.ifd_close_stop_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [order_behavior, position_id, order_side, order_type, price, amount, order_expire, leverage, close_behavior, post_only, ifd_close_limit_price, ifd_close_stop_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        RakutenTrading.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
