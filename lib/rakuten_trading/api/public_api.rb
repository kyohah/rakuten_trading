=begin
#API（証拠金取引所）

#本APIを利用することにより、取り扱っている銘柄一覧の取得、ローソク足データの取得、板の取得、歩値の取得、注文、残高照会といった操作を行う事ができます。 ## 留意事項 - APIキーはお客様のアカウント情報と紐付いております。もし第三者がお客様のAPIキーを知った場合、遠隔で売買注文の操作が可能となります。APIキーを第三者へ渡す事はセキュリティリスクを鑑みお控えください。 - 他社が提供するAPI機能を使用した自動売買取引ツールは、ご自身の判断と責任でご利用ください。 - リクエストパラメーターやレスポンスの日時についてはミリ秒のtimestamp(Unix Time)を用います。 - 日時の範囲検索は「以上・未満」で検索します。 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54
=end

module RakutenTrading
  class PublicApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # ローソク取得
    # 指定された銘柄のローソク足データを取得します。データは指定された範囲で検索され、最新のデータから最大500件まで取得することが可能です。 
    # @param symbol_id シンボルID
    # @param candlestick_type ローソク足の種類。ISO8601フォーマットに準拠。
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :date_from 取得開始日時。UNIXタイムスタンプ（ミリ秒）で指定。
    # @option opts [Integer] :date_to 取得終了日時。UNIXタイムスタンプ（ミリ秒）で指定。
    # @return [InlineResponse2001]
    def get_candlestick(symbol_id, candlestick_type, opts = {})
      data, _status_code, _headers = get_candlestick_with_http_info(symbol_id, candlestick_type, opts)
      data
    end

    # ローソク取得
    # 指定された銘柄のローソク足データを取得します。データは指定された範囲で検索され、最新のデータから最大500件まで取得することが可能です。 
    # @param symbol_id シンボルID
    # @param candlestick_type ローソク足の種類。ISO8601フォーマットに準拠。
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :date_from 取得開始日時。UNIXタイムスタンプ（ミリ秒）で指定。
    # @option opts [Integer] :date_to 取得終了日時。UNIXタイムスタンプ（ミリ秒）で指定。
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_candlestick_with_http_info(symbol_id, candlestick_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublicApi.get_candlestick ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PublicApi.get_candlestick"
      end
      # verify the required parameter 'candlestick_type' is set
      if @api_client.config.client_side_validation && candlestick_type.nil?
        fail ArgumentError, "Missing the required parameter 'candlestick_type' when calling PublicApi.get_candlestick"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['PT1M', 'PT5M', 'PT15M', 'PT30M', 'PT1H', 'PT4H', 'PT8H', 'P1D', 'P1W', 'P1M'].include?(candlestick_type)
        fail ArgumentError, "invalid value for 'candlestick_type', must be one of PT1M, PT5M, PT15M, PT30M, PT1H, PT4H, PT8H, P1D, P1W, P1M"
      end
      # resource path
      local_var_path = '/candlestick'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id
      query_params[:'candlestickType'] = candlestick_type
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublicApi#get_candlestick\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 板取得
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2002]
    def get_orderbook(symbol_id, opts = {})
      data, _status_code, _headers = get_orderbook_with_http_info(symbol_id, opts)
      data
    end

    # 板取得
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2002, Integer, Hash)>] InlineResponse2002 data, response status code and response headers
    def get_orderbook_with_http_info(symbol_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublicApi.get_orderbook ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PublicApi.get_orderbook"
      end
      # resource path
      local_var_path = '/orderbook'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2002' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublicApi#get_orderbook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 銘柄一覧取得
    # 利用可能な全銘柄の一覧を取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authority PERSONAL, CORPORATE。
    # @return [Array<InlineResponse200>]
    def get_symbol(opts = {})
      data, _status_code, _headers = get_symbol_with_http_info(opts)
      data
    end

    # 銘柄一覧取得
    # 利用可能な全銘柄の一覧を取得します。 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :authority PERSONAL, CORPORATE。
    # @return [Array<(Array<InlineResponse200>, Integer, Hash)>] Array<InlineResponse200> data, response status code and response headers
    def get_symbol_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublicApi.get_symbol ...'
      end
      if @api_client.config.client_side_validation && opts[:'authority'] && !['PERSONAL', 'CORPORATE'].include?(opts[:'authority'])
        fail ArgumentError, 'invalid value for "authority", must be one of PERSONAL, CORPORATE'
      end
      # resource path
      local_var_path = '/cfd/symbol'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'authority'] = opts[:'authority'] if !opts[:'authority'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<InlineResponse200>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublicApi#get_symbol\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ティッカー取得
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2003]
    def get_ticker(symbol_id, opts = {})
      data, _status_code, _headers = get_ticker_with_http_info(symbol_id, opts)
      data
    end

    # ティッカー取得
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2003, Integer, Hash)>] InlineResponse2003 data, response status code and response headers
    def get_ticker_with_http_info(symbol_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublicApi.get_ticker ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PublicApi.get_ticker"
      end
      # resource path
      local_var_path = '/ticker'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2003' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublicApi#get_ticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 歩み値取得
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2004]
    def get_trades(symbol_id, opts = {})
      data, _status_code, _headers = get_trades_with_http_info(symbol_id, opts)
      data
    end

    # 歩み値取得
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_trades_with_http_info(symbol_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PublicApi.get_trades ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PublicApi.get_trades"
      end
      # resource path
      local_var_path = '/trades'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2004' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PublicApi#get_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
