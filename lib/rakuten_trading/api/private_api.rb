=begin
#API（証拠金取引所）

#本APIを利用することにより、取り扱っている銘柄一覧の取得、ローソク足データの取得、板の取得、歩値の取得、注文、残高照会といった操作を行う事ができます。 ## 留意事項 - APIキーはお客様のアカウント情報と紐付いております。もし第三者がお客様のAPIキーを知った場合、遠隔で売買注文の操作が可能となります。APIキーを第三者へ渡す事はセキュリティリスクを鑑みお控えください。 - 他社が提供するAPI機能を使用した自動売買取引ツールは、ご自身の判断と責任でご利用ください。 - リクエストパラメーターやレスポンスの日時についてはミリ秒のtimestamp(Unix Time)を用います。 - 日時の範囲検索は「以上・未満」で検索します。 

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54
=end

module RakutenTrading
  class PrivateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 残高一覧取得
    # アカウントの資産情報（各通貨の保有量）を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse2005>]
    def get_asset(opts = {})
      data, _status_code, _headers = get_asset_with_http_info(opts)
      data
    end

    # 残高一覧取得
    # アカウントの資産情報（各通貨の保有量）を取得します。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse2005>, Integer, Hash)>] Array<InlineResponse2005> data, response status code and response headers
    def get_asset_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.get_asset ...'
      end
      # resource path
      local_var_path = '/asset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<InlineResponse2005>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#get_asset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 約定履歴取得
    # 指定された条件に基づくCFD取引の約定履歴（トレード）を取得します。これにより、ユーザーは過去の取引データを分析することができます。 
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :id 約定IDの配列
    # @option opts [Integer] :date_from 取得開始日時（作成日時）。UNIXタイムスタンプ（ミリ秒）で指定。直近48時間。
    # @option opts [Integer] :date_to 取得終了日時（作成日時）。UNIXタイムスタンプ（ミリ秒）で指定。直近48時間。
    # @option opts [String] :order_behavior 注文の挙動（OPEN, CLOSE）
    # @option opts [String] :trade_behavior トレードの挙動（OPEN, CLOSE）
    # @option opts [String] :order_side 売買方向（SELL, BUY）
    # @option opts [Array<String>] :order_pattern 注文パターン（NORMAL, OCO, IFD, IFD_OCO, LOSS_CUT, CLOSE_ALL）
    # @option opts [Array<String>] :order_type 執行条件（MARKET, LIMIT, STOP）
    # @option opts [String] :trade_action 約定アクション（MAKER, TAKER）
    # @option opts [Array<Integer>] :order_id 注文IDの配列
    # @option opts [Array<Integer>] :position_id 建玉IDの配列
    # @option opts [Integer] :size 取得件数。デフォルトは30、最大は500。 (default to 30)
    # @return [Array<CfdTrade>]
    def get_cfd_trades(symbol_id, opts = {})
      data, _status_code, _headers = get_cfd_trades_with_http_info(symbol_id, opts)
      data
    end

    # 約定履歴取得
    # 指定された条件に基づくCFD取引の約定履歴（トレード）を取得します。これにより、ユーザーは過去の取引データを分析することができます。 
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :id 約定IDの配列
    # @option opts [Integer] :date_from 取得開始日時（作成日時）。UNIXタイムスタンプ（ミリ秒）で指定。直近48時間。
    # @option opts [Integer] :date_to 取得終了日時（作成日時）。UNIXタイムスタンプ（ミリ秒）で指定。直近48時間。
    # @option opts [String] :order_behavior 注文の挙動（OPEN, CLOSE）
    # @option opts [String] :trade_behavior トレードの挙動（OPEN, CLOSE）
    # @option opts [String] :order_side 売買方向（SELL, BUY）
    # @option opts [Array<String>] :order_pattern 注文パターン（NORMAL, OCO, IFD, IFD_OCO, LOSS_CUT, CLOSE_ALL）
    # @option opts [Array<String>] :order_type 執行条件（MARKET, LIMIT, STOP）
    # @option opts [String] :trade_action 約定アクション（MAKER, TAKER）
    # @option opts [Array<Integer>] :order_id 注文IDの配列
    # @option opts [Array<Integer>] :position_id 建玉IDの配列
    # @option opts [Integer] :size 取得件数。デフォルトは30、最大は500。
    # @return [Array<(Array<CfdTrade>, Integer, Hash)>] Array<CfdTrade> data, response status code and response headers
    def get_cfd_trades_with_http_info(symbol_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.get_cfd_trades ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PrivateApi.get_cfd_trades"
      end
      # resource path
      local_var_path = '/cfd/trade'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if !opts[:'id'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?
      query_params[:'orderBehavior'] = opts[:'order_behavior'] if !opts[:'order_behavior'].nil?
      query_params[:'tradeBehavior'] = opts[:'trade_behavior'] if !opts[:'trade_behavior'].nil?
      query_params[:'orderSide'] = opts[:'order_side'] if !opts[:'order_side'].nil?
      query_params[:'orderPattern'] = @api_client.build_collection_param(opts[:'order_pattern'], :multi) if !opts[:'order_pattern'].nil?
      query_params[:'orderType'] = @api_client.build_collection_param(opts[:'order_type'], :multi) if !opts[:'order_type'].nil?
      query_params[:'tradeAction'] = opts[:'trade_action'] if !opts[:'trade_action'].nil?
      query_params[:'orderId'] = @api_client.build_collection_param(opts[:'order_id'], :multi) if !opts[:'order_id'].nil?
      query_params[:'positionId'] = @api_client.build_collection_param(opts[:'position_id'], :multi) if !opts[:'position_id'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<CfdTrade>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#get_cfd_trades\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 証拠金関連項目取得
    # 口座の証拠金関連情報を取得します。これには建玉評価損益、必要証拠金、証拠金維持率などが含まれます。 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2006]
    def get_equitydata(opts = {})
      data, _status_code, _headers = get_equitydata_with_http_info(opts)
      data
    end

    # 証拠金関連項目取得
    # 口座の証拠金関連情報を取得します。これには建玉評価損益、必要証拠金、証拠金維持率などが含まれます。 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2006, Integer, Hash)>] InlineResponse2006 data, response status code and response headers
    def get_equitydata_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.get_equitydata ...'
      end
      # resource path
      local_var_path = '/cfd/equitydata'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2006' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#get_equitydata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 注文一覧取得
    # 指定された条件にマッチする注文一覧を取得します。このエンドポイントを通じて、特定のシンボル、注文タイプ、または期間に関する注文の詳細情報を照会することができます。 
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :id 注文IDの配列
    # @option opts [Integer] :date_from 取得開始日時（注文成立日時）。UNIXタイムスタンプ（ミリ秒）で指定。
    # @option opts [Integer] :date_to 取得終了日時（注文成立日時）。UNIXタイムスタンプ（ミリ秒）で指定。
    # @option opts [String] :order_behavior 注文の挙動（OPEN, CLOSE）
    # @option opts [String] :order_side 売買方向（SELL, BUY）
    # @option opts [Array<String>] :order_pattern 注文パターン（NORMAL, OCO, IFD, IFD_OCO）
    # @option opts [Array<String>] :order_type 執行条件（MARKET, LIMIT, STOP）
    # @option opts [Array<String>] :close_behavior 決済挙動（CROSS, FIFO）
    # @option opts [Array<String>] :order_status 注文ステータス（WORKING_ORDER, PARTIAL_FILL）
    # @option opts [BOOLEAN] :post_only メイカー注文のみ許可
    # @option opts [Integer] :size 取得件数。デフォルトは30、最大は500。 (default to 30)
    # @return [Array<OrderDetail>]
    def get_order(symbol_id, opts = {})
      data, _status_code, _headers = get_order_with_http_info(symbol_id, opts)
      data
    end

    # 注文一覧取得
    # 指定された条件にマッチする注文一覧を取得します。このエンドポイントを通じて、特定のシンボル、注文タイプ、または期間に関する注文の詳細情報を照会することができます。 
    # @param symbol_id シンボルID
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :id 注文IDの配列
    # @option opts [Integer] :date_from 取得開始日時（注文成立日時）。UNIXタイムスタンプ（ミリ秒）で指定。
    # @option opts [Integer] :date_to 取得終了日時（注文成立日時）。UNIXタイムスタンプ（ミリ秒）で指定。
    # @option opts [String] :order_behavior 注文の挙動（OPEN, CLOSE）
    # @option opts [String] :order_side 売買方向（SELL, BUY）
    # @option opts [Array<String>] :order_pattern 注文パターン（NORMAL, OCO, IFD, IFD_OCO）
    # @option opts [Array<String>] :order_type 執行条件（MARKET, LIMIT, STOP）
    # @option opts [Array<String>] :close_behavior 決済挙動（CROSS, FIFO）
    # @option opts [Array<String>] :order_status 注文ステータス（WORKING_ORDER, PARTIAL_FILL）
    # @option opts [BOOLEAN] :post_only メイカー注文のみ許可
    # @option opts [Integer] :size 取得件数。デフォルトは30、最大は500。
    # @return [Array<(Array<OrderDetail>, Integer, Hash)>] Array<OrderDetail> data, response status code and response headers
    def get_order_with_http_info(symbol_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.get_order ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PrivateApi.get_order"
      end
      # resource path
      local_var_path = '/cfd/order'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if !opts[:'id'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?
      query_params[:'orderBehavior'] = opts[:'order_behavior'] if !opts[:'order_behavior'].nil?
      query_params[:'orderSide'] = opts[:'order_side'] if !opts[:'order_side'].nil?
      query_params[:'orderPattern'] = @api_client.build_collection_param(opts[:'order_pattern'], :multi) if !opts[:'order_pattern'].nil?
      query_params[:'orderType'] = @api_client.build_collection_param(opts[:'order_type'], :multi) if !opts[:'order_type'].nil?
      query_params[:'closeBehavior'] = @api_client.build_collection_param(opts[:'close_behavior'], :multi) if !opts[:'close_behavior'].nil?
      query_params[:'orderStatus'] = @api_client.build_collection_param(opts[:'order_status'], :multi) if !opts[:'order_status'].nil?
      query_params[:'postOnly'] = opts[:'post_only'] if !opts[:'post_only'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<OrderDetail>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#get_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 建玉一覧取得
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :symbol_id シンボルID。特定の銘柄に対する建玉のみを取得したい場合に指定します。
    # @option opts [Array<Integer>] :id 建玉ID。特定の建玉情報のみを取得したい場合に指定します。
    # @option opts [Integer] :date_from 取得開始日時。指定日時以上の建玉を検索します。
    # @option opts [Integer] :date_to 取得終了日時。指定日時未満の建玉を検索します。
    # @return [Array<InlineResponse2007>]
    def get_position(opts = {})
      data, _status_code, _headers = get_position_with_http_info(opts)
      data
    end

    # 建玉一覧取得
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :symbol_id シンボルID。特定の銘柄に対する建玉のみを取得したい場合に指定します。
    # @option opts [Array<Integer>] :id 建玉ID。特定の建玉情報のみを取得したい場合に指定します。
    # @option opts [Integer] :date_from 取得開始日時。指定日時以上の建玉を検索します。
    # @option opts [Integer] :date_to 取得終了日時。指定日時未満の建玉を検索します。
    # @return [Array<(Array<InlineResponse2007>, Integer, Hash)>] Array<InlineResponse2007> data, response status code and response headers
    def get_position_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.get_position ...'
      end
      # resource path
      local_var_path = '/cfd/position'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = opts[:'symbol_id'] if !opts[:'symbol_id'].nil?
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if !opts[:'id'].nil?
      query_params[:'dateFrom'] = opts[:'date_from'] if !opts[:'date_from'].nil?
      query_params[:'dateTo'] = opts[:'date_to'] if !opts[:'date_to'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<InlineResponse2007>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#get_position\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 注文
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderResponse>]
    def order(body, opts = {})
      data, _status_code, _headers = order_with_http_info(body, opts)
      data
    end

    # 注文
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderResponse>, Integer, Hash)>] Array<OrderResponse> data, response status code and response headers
    def order_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.order ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PrivateApi.order"
      end
      # resource path
      local_var_path = '/cfd/order'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Array<OrderResponse>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 注文訂正
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderResponse>]
    def order_amend(body, opts = {})
      data, _status_code, _headers = order_amend_with_http_info(body, opts)
      data
    end

    # 注文訂正
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderResponse>, Integer, Hash)>] Array<OrderResponse> data, response status code and response headers
    def order_amend_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.order_amend ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PrivateApi.order_amend"
      end
      # resource path
      local_var_path = '/cfd/order'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Array<OrderResponse>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#order_amend\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # 注文取消
    # @param symbol_id シンボルID
    # @param id 注文ID
    # @param [Hash] opts the optional parameters
    # @return [Array<OrderResponse>]
    def order_cancel(symbol_id, id, opts = {})
      data, _status_code, _headers = order_cancel_with_http_info(symbol_id, id, opts)
      data
    end

    # 注文取消
    # @param symbol_id シンボルID
    # @param id 注文ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<OrderResponse>, Integer, Hash)>] Array<OrderResponse> data, response status code and response headers
    def order_cancel_with_http_info(symbol_id, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PrivateApi.order_cancel ...'
      end
      # verify the required parameter 'symbol_id' is set
      if @api_client.config.client_side_validation && symbol_id.nil?
        fail ArgumentError, "Missing the required parameter 'symbol_id' when calling PrivateApi.order_cancel"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PrivateApi.order_cancel"
      end
      # resource path
      local_var_path = '/cfd/order'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'symbolId'] = symbol_id
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<OrderResponse>' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'SignatureAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PrivateApi#order_cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
